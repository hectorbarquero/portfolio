<carInformation>
    <title>An example of product information</title>
    <content>
        <paragraph>
            This is where you'd have text from your document, but it might be cluttered with tags that you want to clean up automatically. For example, "...learn more about <variable id='XYZ-5000'> on our official product information page.

            <variable id='XYZ-5000'> was designed for performance and comfort, but requires specific maintenance."

            "Maintain <variable id='XYZ-5000'> with <variable id='high quality oil'>."

            You can see I wrapped information inside of tagsets. This is common with many output files from PIM, CRM, and DITA tools. Lets clean these up.
        </paragraph>
        <paragraph>
            The <variable id='XYZ-5000'>, similar to the <variable id='XYZ-123'>, comes with an official <variable id='maintenace kit'>. Use the <variable id='maintenace kit'> to perform scheduled service. 

            Learn more about your scheduled service in the official <variable id='product-manual'>
        </paragraph>
        <paragraph>
            To run my program, rename your source file source.xml and use the command line. Run the following command node preprocXML.js, then view the output of processedSource.xml. Execute node postprocXML.js.
        </paragraph>
    </content>
    <specifications>
        <engine>4.0L V8 twin turbo</engine>
        <safetyFeatures>
            <airbags>Front, side, and curtain airbags</airbags>
            <collisionWarningSystem>Advanced collision warning system</collisionWarningSystem>
        </safetyFeatures>
        <interior>lorem ipsum</interior>
    </specifications>
</carInformation>
